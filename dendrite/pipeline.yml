steps:
  - command:
      - "env"
      - "bash build.sh"
    label: "\U0001F528 Build / :go: 1.15"
    plugins:
      - docker#v3.0.1:
          image: "golang:1.15"
          mount-buildkite-agent: false
    retry:
      automatic:
        - exit_status: 128
          limit: 3
  
  - label: "\U0001F528 Build Windows / :go: 1.15"
    env:
      GOOS: "windows" 
      GOARCH: "amd64"
      CC: "/usr/bin/x86_64-w64-mingw32-gcc"
    command:
      - "apt update && apt install -y gcc-mingw-w64-x86-64" # install required gcc
      - "env"
      - "bash build.sh"
    plugins:
      - docker#v3.0.1:
          image: "golang:1.15"
          mount-buildkite-agent: false
          propagate-environment: true
    retry:
      automatic:
        - exit_status: 128
          limit: 3

  - command:
      - "env"
      - "go test ./..."
    label: "\U0001F9EA Unit tests / :go: 1.15"
    plugins:
      - docker#v3.0.1:
          image: "golang:1.15"
          mount-buildkite-agent: false

  - wait

  - command:
      - "env"
      # https://github.com/golangci/golangci-lint#memory-usage-of-golangci-lint
      - "COMPLEMENT_LINT_CONCURRENCY=2 GOGC=50 ./build/scripts/find-lint.sh"
    label: "\U0001F9F9 Lint / :go: 1.15"
    agents:
      # Use a larger instance as linting takes a looot of memory
      queue: "xlarge"
    plugins:
      - docker#v3.0.1:
          image: "golang:1.15"
          mount-buildkite-agent: false

  - command:
      - "go build ./cmd/dendrite-upgrade-tests"
      - "./dendrite-upgrade-tests --head . --docker-host 172.17.0.1"
    label: "\U0001F39A Upgrades"
    agents:
      queue: "medium"
    plugins:
      - docker#v3.5.0:
          # Use the same base docker image as complement as dendrite-upgrade-tests also needs Go and Docker.
          image: "matrixdotorg/complement:latest"
          mount-buildkite-agent: false
          # The upgrade test uses Docker so pass through the docker socket. This means it shares
          # the hosts Docker.
          volumes:
            - "/var/run/docker.sock:/var/run/docker.sock"

  - command:
      - docker build -t complement-dendrite -f build/scripts/Complement.Dockerfile .
      - "mkdir -p complement"
      - "wget -O - https://github.com/matrix-org/complement/archive/HEAD.tar.gz | tar -xz --strip-components=1 -C complement"
      - "bash -c \"cd complement && set -o pipefail && COMPLEMENT_BASE_IMAGE=complement-dendrite:latest go test -v -json -tags='dendrite_blacklist' ./tests/... 2>&1 | gotestfmt\""
    label: "\U0001F9EA Complement"
    agents:
      queue: "medium"
    plugins:
      - docker#v3.5.0:
          # The dockerfile for this image is at https://github.com/matrix-org/complement/blob/HEAD/dockerfiles/ComplementCIBuildkite.Dockerfile.
          image: "matrixdotorg/complement:latest"
          mount-buildkite-agent: false
          # Complement needs to know if it is running under CI
          environment:
           - "CI=true"
          publish: [ "8448:8448" ]
          # Complement uses Docker so pass through the docker socket. This means Complement shares
          # the hosts Docker.
          volumes:
            - "/var/run/docker.sock:/var/run/docker.sock"

  - label: "SyTest - :go: 1.15 / :postgres: 9.6"
    agents:
      queue: "medium"
    env:
      POSTGRES: "1"
      SYTEST_BRANCH: "$BUILDKITE_BRANCH"
    command:
      - "bash /bootstrap.sh dendrite"
    plugins:
      - docker#v3.0.1:
          image: "matrixdotorg/sytest-dendrite"
          propagate-environment: true
          always-pull: true
          workdir: "/src"
          entrypoint: '/bin/sh'
          shell: ["-x", "-c"]
          init: false
          debug: true
          mount-buildkite-agent: false
          volumes: ["./logs:/logs"]
      - artifacts#v1.2.0:
          upload: [ "logs/**/*.log", "logs/**/*.log.*", "logs/results.tap" ]
      - matrix-org/annotate:
          path: "logs/annotate.md"
          style: "error"
    retry:
      automatic:
        - exit_status: -1
          limit: 2
        - exit_status: 2
          limit: 2
  
  - label: "SyTest - :go: 1.15 / :postgres: 9.6 / full HTTP APIs"
    agents:
      queue: "medium"
    env:
      POSTGRES: "1"
      API: "1"
      SYTEST_BRANCH: "$BUILDKITE_BRANCH"
    command:
      - "bash /bootstrap.sh dendrite"
    plugins:
      - docker#v3.0.1:
          image: "matrixdotorg/sytest-dendrite"
          propagate-environment: true
          always-pull: true
          workdir: "/src"
          entrypoint: '/bin/sh'
          shell: ["-x", "-c"]
          init: false
          debug: true
          mount-buildkite-agent: false
          volumes: ["./logs:/logs"]
      - artifacts#v1.2.0:
          upload: [ "logs/**/*.log", "logs/**/*.log.*", "logs/results.tap" ]
      - matrix-org/annotate:
          path: "logs/annotate.md"
          style: "error"
    retry:
      automatic:
        - exit_status: -1
          limit: 2
        - exit_status: 2
          limit: 2

  - label: "SyTest - :go: 1.15 / :sqlite: 3"
    agents:
      queue: "medium"
    env:
      SYTEST_BRANCH: "$BUILDKITE_BRANCH"
    command:
      - "bash /bootstrap.sh dendrite"
    plugins:
      - docker#v3.0.1:
          image: "matrixdotorg/sytest-dendrite"
          propagate-environment: true
          always-pull: true
          workdir: "/src"
          entrypoint: '/bin/sh'
          shell: ["-x", "-c"]
          init: false
          debug: true
          mount-buildkite-agent: false
          volumes: ["./logs:/logs"]
      - artifacts#v1.2.0:
          upload: [ "logs/**/*.log", "logs/**/*.log.*", "logs/results.tap" ]
      - matrix-org/annotate:
          path: "logs/annotate.md"
          style: "error"
    retry:
      automatic:
        - exit_status: -1
          limit: 2
        - exit_status: 2
          limit: 2

  - label: "SyTest - :go: 1.15 / :sqlite: 3 / full HTTP APIs"
    agents:
      queue: "medium"
    env:
      API: "1"
      SYTEST_BRANCH: "$BUILDKITE_BRANCH"
    command:
      - "bash /bootstrap.sh dendrite"
    plugins:
      - docker#v3.0.1:
          image: "matrixdotorg/sytest-dendrite"
          propagate-environment: true
          always-pull: true
          workdir: "/src"
          entrypoint: '/bin/sh'
          shell: ["-x", "-c"]
          init: false
          debug: true
          mount-buildkite-agent: false
          volumes: ["./logs:/logs"]
      - artifacts#v1.2.0:
          upload: [ "logs/**/*.log", "logs/**/*.log.*", "logs/results.tap" ]
      - matrix-org/annotate:
          path: "logs/annotate.md"
          style: "error"
    retry:
      automatic:
        - exit_status: -1
          limit: 2
        - exit_status: 2
          limit: 2
