# Use Docker file from https://hub.docker.com/r/runmymind/docker-android-sdk
# Last docker plugin version can be found here:
# https://github.com/buildkite-plugins/docker-buildkite-plugin/releases
# We propagate the environment to the container (sse https://github.com/buildkite-plugins/docker-buildkite-plugin#propagate-environment-optional-boolean)

steps:
  - label: "Compile and run Unit tests"
    agents:
      # We use a xlarge sized instance instead of the normal small ones because
      # gradle build can be memory hungry
      queue: "xlarge"
    commands:
      - "./gradlew clean test --stacktrace -PallWarningsAsErrors=false"
    plugins:
      - docker#v3.1.0:
          image: "runmymind/docker-android-sdk"
          propagate-environment: true
          mount-buildkite-agent: false

  - label: "Compile Android tests"
    agents:
      # We use a xlarge sized instance instead of the normal small ones because
      # gradle build can be memory hungry
      queue: "xlarge"
    commands:
      - "./gradlew clean assembleAndroidTest --stacktrace -PallWarningsAsErrors=false"
    plugins:
      - docker#v3.1.0:
          image: "runmymind/docker-android-sdk"
          propagate-environment: true
          mount-buildkite-agent: false

  - label: ":android: Assemble GPlay Debug version"
    agents:
      # We use a xlarge sized instance instead of the normal small ones because
      # gradle build can be memory hungry
      # build on the burn-after-use ephemeral queue
      queue: "ephemeral-xlarge"
    commands:
      - "./gradlew clean assembleGplayDebug lintGplayRelease --stacktrace"
      - "mv vector/build/outputs/apk/gplay/debug/*.apk ."
    key: "gplay_debug"
    artifact_paths:
      - "*.apk"
      - "vector/build/reports/*.*"
    branches: "!main"
    plugins:
      - docker#v3.1.0:
          image: "runmymind/docker-android-sdk"
          propagate-environment: true
          mount-buildkite-agent: false

  - label: ":android: Assemble FDroid Debug version"
    agents:
      # We use a xlarge sized instance instead of the normal small ones because
      # gradle build can be memory hungry
      # build on the burn-after-use ephemeral queue
      queue: "ephemeral-xlarge"
    commands:
      - "./gradlew clean assembleFdroidDebug lintFdroidRelease --stacktrace"
      - "mv vector/build/outputs/apk/fdroid/debug/*.apk ."
    artifact_paths:
      - "*.apk"
      - "vector/build/reports/*.*"
    branches: "!main"
    plugins:
      - docker#v3.1.0:
          image: "runmymind/docker-android-sdk"
          propagate-environment: true
          mount-buildkite-agent: false

  - label: ":android: Lint analysis of the SDK"
    agents:
      # We use a xlarge sized instance instead of the normal small ones because
      # gradle build can be memory hungry
      queue: "xlarge"
    commands:
      - "./gradlew clean :matrix-sdk-android:lintRelease --stacktrace"
    artifact_paths:
      - "matrix-sdk-android/build/reports/*.*"
    branches: "!main"
    plugins:
      - docker#v3.1.0:
          image: "runmymind/docker-android-sdk"
          propagate-environment: true
          mount-buildkite-agent: false

  - label: ":android: Build Google Play unsigned release APK"
    agents:
      # We use a xlarge sized instance instead of the normal small ones because
      # gradle build can be memory hungry
      queue: "xlarge"
    commands:
      - "./gradlew clean assembleGplayRelease --stacktrace"
      - "mv vector/build/outputs/apk/gplay/release/*.apk ."
    key: "gplay_release"
    artifact_paths:
      - "*.apk"
    branches: "main"
    plugins:
      - docker#v3.1.0:
          image: "runmymind/docker-android-sdk"
          propagate-environment: true
          mount-buildkite-agent: false

  # Code quality
  - label: ":lint-roller: Code quality"
    command:
      - apt-get update
      - DEBIAN_FRONTEND=noninteractive apt-get install -y wget perl-modules
      - ./tools/check/check_code_quality.sh
    plugins:
      - docker#v3.1.0:
          image: "debian:buster-slim"
          mount-buildkite-agent: false

  - label: "ktlint"
    command:
      - "curl -sSLO https://github.com/pinterest/ktlint/releases/download/0.36.0/ktlint && chmod a+x ktlint"
      - "./ktlint --android --experimental -v"
    plugins:
      - docker#v3.1.0:
          image: "openjdk"
          mount-buildkite-agent: false

  # Check that some language files are identical.
  # Due to Android issue, some of the resource folders, used at runtime, do not have the same name than those used by Weblate export
  # - Indonesian:
  # must be values-in/, and Weblate export data into values-id/
  # In case of diff, copy values-id/strings.xml to values-in/strings.xml
  # - Hebrew:
  # must be values-iw/, and Weblate export data into values-he/
  # In case of diff, copy values-he/strings.xml to values-iw/strings.xml
  #
  # Note that this step will fail for the first diff encountered, we may improve this in the future.
  # - label: "Weblate export check"
  #   command:
  #     - "diff ./vector/src/main/res/values-id/strings.xml ./vector/src/main/res/values-in/strings.xml"
  #     - "diff ./vector/src/main/res/values-he/strings.xml ./vector/src/main/res/values-iw/strings.xml"

  # run the εxodus static analyser
  - label: "εxodus"
    plugins:
      - artifacts#v1.3.0:
          download:
            - "vector-gplay-universal-*.apk"
          upload:
            - "exodus.json"

    commands:
      - "mv vector-gplay-universal-*.apk app.apk"
      - "docker run -v $(pwd)/app.apk:/app.apk --rm -i exodusprivacy/exodus-standalone -j > exodus.json"
      - "jq -e '.trackers == []' exodus.json > /dev/null || { echo 'static analysis identified user tracking library' ; false; }"
    depends_on: 
      - gplay_debug
      - gplay_release
