# Use Docker file from https://hub.docker.com/r/runmymind/docker-android-sdk
# Last docker plugin version can be found here:
# https://github.com/buildkite-plugins/docker-buildkite-plugin/releases
# We propagate the environment to the container (sse https://github.com/buildkite-plugins/docker-buildkite-plugin#propagate-environment-optional-boolean)

steps:
  - label: "Compile and run Unit tests"
    agents:
      # We use a medium sized instance instead of the normal small ones because
      # gradle build can be memory hungry
      queue: "medium"
    commands:
      - "./gradlew clean test --stacktrace"
    plugins:
      - docker#v3.1.0:
          image: "runmymind/docker-android-sdk"
          propagate-environment: true
          mount-buildkite-agent: false

  - label: "Compile Android tests"
    agents:
      # We use a xlarge sized instance instead of the normal small ones because
      # gradle build can be memory hungry
      # build on the burn-after-use ephemeral queue
      queue: "ephemeral-xlarge"
    commands:
      - "./gradlew clean assembleAndroidTest --stacktrace"
    plugins:
      - docker#v3.1.0:
          image: "runmymind/docker-android-sdk"
          propagate-environment: true
          mount-buildkite-agent: false

  - label: ":android: Assemble GPlay Debug version"
    agents:
      # We use a xlarge sized instance instead of the normal small ones because
      # gradle build can be memory hungry
      # build on the burn-after-use ephemeral queue
      queue: "ephemeral-xlarge"
    commands:
      - "./gradlew clean lintGplayRelease assembleGplayDebug --stacktrace"
    artifact_paths:
      - "vector/build/outputs/apk/gplay/debug/*.apk"
    branches: "!master"
    plugins:
      - docker#v3.1.0:
          image: "runmymind/docker-android-sdk"
          propagate-environment: true
          mount-buildkite-agent: false

  - label: ":android: Assemble FDroid Debug version"
    agents:
      # We use a xlarge sized instance instead of the normal small ones because
      # gradle build can be memory hungry
      # build on the burn-after-use ephemeral queue
      queue: "ephemeral-xlarge"
    commands:
      - "./gradlew clean lintFdroidRelease assembleFdroidDebug --stacktrace"
    artifact_paths:
      - "vector/build/outputs/apk/fdroid/debug/*.apk"
    branches: "!master"
    plugins:
      - docker#v3.1.0:
          image: "runmymind/docker-android-sdk"
          propagate-environment: true
          mount-buildkite-agent: false

  - label: ":android: Build Google Play unsigned release APK"
    agents:
      # We use a xlarge sized instance instead of the normal small ones because
      # gradle build can be memory hungry
      queue: "xlarge"
    commands:
      - "./gradlew clean assembleGplayRelease --stacktrace"
    artifact_paths:
      - "vector/build/outputs/apk/gplay/release/*.apk"
    branches: "master"
    plugins:
      - docker#v3.1.0:
          image: "runmymind/docker-android-sdk"
          propagate-environment: true
          mount-buildkite-agent: false

  # Code quality
  - label: ":lint-roller: Code quality"
    command:
      - apt-get update
      - DEBIAN_FRONTEND=noninteractive apt-get install -y wget perl-modules
      - ./tools/check/check_code_quality.sh
    plugins:
      - docker#v3.1.0:
          image: "debian:buster-slim"
          mount-buildkite-agent: false

  - label: "ktlint"
    command:
      - "curl -sSLO https://github.com/pinterest/ktlint/releases/download/0.36.0/ktlint && chmod a+x ktlint"
      - "./ktlint --android --experimental -v"
    plugins:
      - docker#v3.1.0:
          image: "openjdk"
          mount-buildkite-agent: false

  # Check that indonesians files are identical.
  # Due to Android issue, the resource folder must be values-in/, and Weblate export data into values-id/.
  # If this step fails, it means that Weblate has updated the file in value-id/ so to fix it, copy the file to values-in/
  - label: "Indonesian"
    command:
      - "diff ./vector/src/main/res/values-id/strings.xml ./vector/src/main/res/values-in/strings.xml"
